<?php

/**
 * @file
 * Install, update and uninstall functions for the synpromotion module.
 */

/**
 * Implements hook_install().
 */
function synpromotion_install() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
  create_commerce_promotion_order_buy_x_get_y_discount();
  create_commerce_promotion_order_buy_x_get_y_present();
  create_commerce_promotion_order_buy_x_get_y_2_for_1();
  create_commerce_promotion_order_item_percentage_off();
  create_commerce_promotion_shipment_percentage_off();
}

/**
 * Implements hook_uninstall().
 */
function synpromotion_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Create order_buy_x_get_y discount.
 */
function create_commerce_promotion_order_buy_x_get_y_discount() {
  $promotion = \Drupal::entityTypeManager()
    ->getStorage('commerce_promotion')
    ->create([
      'uid' => 1,
      'name' => 'Скидка на сопутствующий товар',
      'description' => 'Купи 1 товара, получи скидку на другой',
      'created' => time(),
      'offer' => [
        'target_plugin_id' => 'order_buy_x_get_y',
        'target_plugin_configuration' => [
          'buy_quantity' => '1',
          'buy_conditions' => [],
          'get_quantity' => '1',
          'get_conditions' => [],
          'get_auto_add' => 0,
          'offer_type' => 'fixed_amount',
          'offer_percentage' => NULL,
          'offer_amount' => [
            'number' => 50,
            'currency_code' => 'RUB',
          ],
          'offer_limit' => 0,
        ],
      ],
      'compatibility' => 'any',
      'status' => 0,
      'require_coupon' => 0,
      'order_types' => ['default'],
      'stores' => [1],
    ]);
  $promotion->save();
}

/**
 * Create order_buy_x_get_y present.
 */
function create_commerce_promotion_order_buy_x_get_y_present() {
  $promotion = \Drupal::entityTypeManager()
    ->getStorage('commerce_promotion')
    ->create([
      'uid' => 1,
      'name' => 'Товар + подарок',
      'description' => 'Купи один товар, получи другой (иной) в подарок',
      'created' => time(),
      'offer' => [
        'target_plugin_id' => 'order_buy_x_get_y',
        'target_plugin_configuration' => [
          'buy_quantity' => '2',
          'buy_conditions' => [],
          'get_quantity' => '1',
          'get_conditions' => [],
          'get_auto_add' => 1,
          'offer_type' => 'percentage',
          'offer_percentage' => 1,
          'offer_amount' => NULL,
          'offer_limit' => 0,
        ],
      ],
      'compatibility' => 'any',
      'status' => 0,
      'require_coupon' => 0,
      'order_types' => ['default'],
      'stores' => [1],
    ]);
  $promotion->save();
}

/**
 * Create order_buy_x_get_y 2 for the price of 1.
 */
function create_commerce_promotion_order_buy_x_get_y_2_for_1() {
  $promotion = \Drupal::entityTypeManager()
    ->getStorage('commerce_promotion')
    ->create([
      'uid' => 1,
      'name' => 'Акция 2 по цене 1',
      'description' => 'Купи 2 товара и получи скидку на второй 100%
        возможность купить 3 а заплатить за 2 - вариативность кол-ва
        но применяется к одному товару (1-й номенклатуре)',
      'created' => time(),
      'offer' => [
        'target_plugin_id' => 'order_buy_x_get_y',
        'target_plugin_configuration' => [
          'buy_quantity' => '1',
          'buy_conditions' => [],
          'get_quantity' => '1',
          'get_conditions' => [],
          'get_auto_add' => 0,
          'offer_type' => 'fixed_amount',
          'offer_percentage' => NULL,
          'offer_amount' => [
            'number' => 150,
            'currency_code' => 'RUB',
          ],
          'offer_limit' => 0,
        ],
      ],
      'compatibility' => 'any',
      'status' => 0,
      'require_coupon' => 0,
      'order_types' => ['default'],
      'stores' => [1],
    ]);
  $promotion->save();
}

/**
 * Create order_item_percentage_off.
 */
function create_commerce_promotion_order_item_percentage_off() {
  $promotion = \Drupal::entityTypeManager()
    ->getStorage('commerce_promotion')
    ->create([
      'uid' => 1,
      'name' => 'Скидка на категорию товара',
      'description' => 'Фиксированный процент скидки на товар в конкретной категории',
      'created' => time(),
      'offer' => [
        'target_plugin_id' => 'order_item_percentage_off',
        'target_plugin_configuration' => [
          'display_inclusive' => TRUE,
          'conditions' => [],
          'operator' => 'AND',
          'percentage' => '0.15',
        ],
      ],
      'compatibility' => 'any',
      'status' => 0,
      'require_coupon' => 0,
      'order_types' => ['default'],
      'stores' => [1],
    ]);
  $promotion->save();
}

/**
 * Create shipment_percentage_off.
 */
function create_commerce_promotion_shipment_percentage_off() {
  if (!\Drupal::moduleHandler()->moduleExists('commerce_shipping')) {
    return;
  }
  $promotion = \Drupal::entityTypeManager()
    ->getStorage('commerce_promotion')
    ->create([
      'uid' => 1,
      'name' => 'Скидка на доставку',
      'description' => 'При покупке от суммы доставка бесплатно',
      'created' => time(),
      'offer' => [
        'target_plugin_id' => 'shipment_percentage_off',
        'target_plugin_configuration' => [
          'percentage' => 1,
          'display_inclusive' => '1',
          'filter' => 'none',
          'shipping_methods' => [],
        ],
      ],
      'compatibility' => 'any',
      'status' => 0,
      'require_coupon' => 0,
      'order_types' => ['default'],
      'stores' => [1],
      'conditions' => [
        [
          'target_plugin_id' => 'order_total_price',
          'target_plugin_configuration' => [
            'operator' => '>',
            'amount' => [
              'number' => 3000,
              'currency_code' => 'RUB',
            ],
          ],
        ],
      ],
    ]);
  $promotion->save();
}

/**
 * Implements hook_schema().
 */
function synpromotion_schema() {
  $schema['synpromotion_example'] = [
    'description' => 'Table description.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique record ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who created the record.',
      ],
      'status' => [
        'description' => 'Boolean indicating whether this record is active.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'type' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type of the record.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was created.',
      ],
      'data' => [
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'The arbitrary data for the item.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'type' => ['type'],
      'uid' => ['uid'],
      'status' => ['status'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function synpromotion_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['synpromotion_status'] = [
      'title' => t('synpromotion status'),
      'value' => t('synpromotion value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}
